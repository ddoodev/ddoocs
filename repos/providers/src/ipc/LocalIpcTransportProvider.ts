import { IpcPacketLike } from '@src/ipc/IpcPacketLike'
import { IpcTransportProviderEventCallback } from '@src/ipc/IpcTransportProviderEventCallback'
import { IpcShardIdentificationOptions } from '@src/ipc/IpcShardIdentificationOptions'
import { Provider } from '@src/Provider'

/**
 * Represents a local ipc transport provider. Custom local ipc transport providers must implement it.
 *
 * 1. Unlike InternetIpcTransportProvider, operates inside a single machine.
 *
 * 2. The listen() method is called inside each shard. Also, this method is called exactly 1 time in each sharding manager.
 *
 * 3. We will create ONLY 1 instance of your provider in each sharding manager, as well as in each shard.
 * Your provider must operate multiple connections within a single instance.
 *
 * 4. Your provider should not take more than 10 milliseconds to send a single packet.
 *
 * 5. **Your provider should handle outages automatically.**
 * When the shard is disconnected, your provider should call the
 * [IpcOpCodes](https://ddoo.dev/docs/api/Providers/latest/ipc/enums/IpcOpCodes).ERROR op code with the
 * [IpcEvents](https://ddoo.dev/docs/api/Providers/latest/ipc/enums/IpcEvents).DISCONNECTED event in all
 * the listeners connected to the shard. Then your provider should disable these listeners.
 * */
export interface LocalIpcTransportProvider extends Provider {
  /**
   * Start the listening server.
   * The server must accept packets intended for the shard whose ID is specified in the first parameter of the function.
   * @param shard - Shard number. Can be negative when used for sharding managers.
   * @param id - The Shard ID generated by the library. Can be used by the provider to provide communication.
   * */
  listen(shard: number, id: string): Promise<void>

  /**
   * Connect to the specified shard. This implies the creation of a stable, preferably encrypted connection with the shard.
   * @param shard - Shard number. Can be negative when used for sharding managers.
   * @param identity - Identification information for each shard and sharding manager.
   * Contains a nullable raw shard process/worker/cluster object. For more information, read the interface description.
   * */
  connect(shard: number, identity: IpcShardIdentificationOptions): Promise<void>

  /**
   * Disconnect from a specific shard. This implies that it is impossible to send packets to this shard (from this client, not others).
   * @param shard - Shard number. Can be negative when used for sharding managers.
   * @param identity - Identification information for each shard and sharding manager.
   * Contains a nullable raw shard process/worker/cluster object. For more information, read the interface description.
   * */
  disconnect(shard: number, identity: IpcShardIdentificationOptions): Promise<void>

  /**
   * Send the package to the specified shard.
   * @param shard - Shard number. Can be negative when used for sharding managers.
   * @param packet - Standardized data in JSON.
   * */
  send(shard: number, packet: IpcPacketLike): void

  /**
   * Connect the listener. Each incoming packet must be sent to all signed listeners at the same time.
   * @param listenerId - The unique ID of the listener.
   * It contains the shard number, look for for
   * [DiscordooSnowflake](https://ddoo.dev/docs/api/Discordoo/latest/utils/classes/DiscordooSnowflake#method:deconstruct).
   * The listener should receive packets only from this shard.
   * @param fn - Listener callback.
   * */
  subscribe(listenerId: string, fn: IpcTransportProviderEventCallback): void

  /**
   * Remove the listener.
   * @param listenerId - The unique ID of the listener. It contains the shard number, look for
   * [DiscordooSnowflake](https://ddoo.dev/docs/api/Discordoo/latest/utils/classes/DiscordooSnowflake#method:deconstruct).
   * */
  unsubscribe(listenerId: string): void

}